// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  password  String
  createdAt DateTime @default(now())

  Buying       Buying[]
  Bought       Bought[]
  BoughtResume BoughtsResumes[]

  @@map("users")
}

model Buying {
  id            Int           @id @default(autoincrement())
  userId        Int
  user          Users         @relation(fields: [userId], references: [id])
  statusText    StatusOptions
  nameText      String        @default("")
  brandText     String        @default("")
  vol           Int           @default(0)
  unitText      UnitsOptions  @default(g)
  qtt           Int           @default(0)
  price         Int           @default(0)
  positionIndex Int
  createdAt     DateTime      @default(now())

  @@map("buying")
}

enum StatusOptions {
  default
  bought
  not_bought
}

enum UnitsOptions {
  g
  ml
  unid
}

model Status {
  id   Int           @id @default(autoincrement())
  name StatusOptions

  Bought Bought[]

  @@map("status")
}

model Brands {
  id   Int    @id @default(autoincrement())
  name String @unique

  items  Items[]
  Bought Bought[]

  @@map("brands")
}

model Units {
  id   Int          @id @default(autoincrement())
  name UnitsOptions

  items  Items[]
  Bought Bought[]

  @@map("units")
}

model Items {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  brandId   Int
  brand     Brands   @relation(fields: [brandId], references: [id])
  vol       Int
  unitId    Int
  unit      Units    @relation(fields: [unitId], references: [id])
  timesUsed Int
  createdAt DateTime @default(now())

  Bought Bought[]

  @@map("items")
}

model Bought {
  id             Int            @id @default(autoincrement())
  name           String
  userId         Int
  user           Users          @relation(fields: [userId], references: [id])
  statusId       Int
  status         Status         @relation(fields: [statusId], references: [id])
  itemId         Int
  item           Items          @relation(fields: [itemId], references: [id])
  brandId        Int
  brand          Brands         @relation(fields: [brandId], references: [id])
  vol            Int
  unitId         Int
  unit           Units          @relation(fields: [unitId], references: [id])
  qtt            Int
  price          Int
  positionIndex  Int
  boughtsResumes BoughtsResumes @relation(fields: [boughtResumeId], references: [id])
  boughtResumeId Int
  createdAt      DateTime       @default(now())

  @@map("bought")
}

model BoughtsResumes {
  id        Int      @id @default(autoincrement())
  name      String
  userId    Int
  user      Users    @relation(fields: [userId], references: [id])
  month     String
  createdAt DateTime @default(now())
  total     Int

  bought Bought[]

  @@map("boughtResume")
}
